%{

#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable: 4013 4244 4267 4996)

extern FILE * yyin;

extern int yylex();
int yyerror(char *s);

%}

%token LETTER DIGIT INT_TYPE REAL_TYPE STRING_TYPE BOOL_TYPE RELOP ADDOP MULOP EMPTY ALPHANUMERICAL_CHAR

%token COMMA DOT DOT_COMMA PARENTHESIS_OPEN PARENTHESIS_CLOSE VAR CONST DOT_DOT EQUALS ARRAY BRAKET_OPEN BRAKET_CLOSE 

%token OF FUNCTION PROCEDURE TPROGRAM BEGIN END WHILE FOR TO DO AND NOT ASIGNATION_VARIABLE QUOTATIONS 

%token DOWNTO IF THEN ELSE READLN WRITE WRITELN READ SIGN NON_CERO_DIGIT BRACKET_OPEN BRACKET_CLOSE E_MINUS E_MAX

%token LIST_EXPRESSION OR

%debug

%%

PROGRAM : TPROGRAM IDENTIFIER PARENTHESIS_OPEN LIST_IDENTIFIER PARENTHESIS_CLOSE DOT_COMMA 
		DECLARATIONS SUBPROGRAM_DECLARATION COMPOSED_INSTRUCTION DOT
	;

IDENTIFIER : LETTER | LETTER NEXT_IDENTIFIER
	;
	         
NEXT_IDENTIFIER : LETTER NEXT_IDENTIFIER | DIGIT NEXT_IDENTIFIER | EMPTY
	;

LIST_IDENTIFIER : IDENTIFIER | LIST_IDENTIFIER COMMA IDENTIFIER
	;

DECLARATIONS : VARIABLE_DECLARATION | CONSTANT_DECLARATION
	;

VARIABLE_DECLARATION : VARIABLE_DECLARATION VAR LIST_IDENTIFIER DOT_DOT TYPE DOT_COMMA | EMPTY
	;

CONSTANT_DECLARATION : CONSTANT_DECLARATION CONST IDENTIFIER EQUALS INT_CONSTANT DOT_COMMA 
		| CONSTANT_DECLARATION CONST IDENTIFIER EQUALS REAL_CONSTANT DOT_COMMA
		| CONSTANT_DECLARATION CONST IDENTIFIER EQUALS STRING_CONSTANT DOT_COMMA | EMPTY 
	;

TYPE : STANDARD_TYPE | ARRAY BRAKET_OPEN INT_NUMBER DOT DOT INT_NUMBER BRAKET_CLOSE OF STANDARD_TYPE
	;
		
STANDARD_TYPE : INT_TYPE | REAL_TYPE | STRING_TYPE | BOOL_TYPE
	;

SUBPROGRAM_DECLARATIONS: SUBPROGRAM_DECLARATIONS SUBPROGRAM_DECLARATION DOT_COMMA | EMPTY
	;

SUBPROGRAM_DECLARATION : SUBPROGRAM_HEAD DECLARATIONS SUBPROGRAM_DECLARATIONS COMPOSED_INSTRUCTION
	;

SUBPROGRAM_HEAD : FUNCTION IDENTIFIER ARGUMENTS DOT_DOT STANDARD_TYPE DOT_COMMA 
		| PROCEDURE IDENTIFIER ARGUMENTS DOT_COMMA
	;

ARGUMENTS : PARENTHESIS_OPEN LIST_PARAMETERS PARENTHESIS_CLOSE | EMPTY
	;

LIST_PARAMETERS : LIST_IDENTIFIER DOT_DOT TYPE | LIST_PARAMETERS DOT_COMMA LIST_IDENTIFIER DOT_DOT TYPE
	;

COMPOSED_INSTRUCTION : BEGIN OPTIONAL_INTRUCTIONS END
	;

OPTIONAL_INTRUCTIONS : LIST_INSTRUCTIONS | EMPTY
	;

LIST_INSTRUCTIONS : INSTRUCTIONS | LIST_INSTRUCTIONS DOT_COMMA INSTRUCTIONS
	;

INSTRUCTIONS : ASIGNATION_VARIABLE | PROCEDURE_INSTRUCTION | COMPOSED_INSTRUCTION | IF_INSTRUCTION 
		| WHILE_INSTRUCTION | READING_INSTRUCTION
	;

WHILE_INSTRUCTION : WHILE RELOP_EXPRESSION DO INSTRUCTIONS
		| FOR FOR_ASIGNATION TO EXPRESSION DO INSTRUCTIONS
		| FOR FOR_ASIGNATION DOWNTO EXPRESSION DO INSTRUCTIONS
	;

READING_INSTRUCTION : READ PARENTHESIS_OPEN IDENTIFIER PARENTHESIS_CLOSE | READLN PARENTHESIS_OPEN IDENTIFIER PARENTHESIS_CLOSE
	;

WRITE_INSTRUCTION : WRITE PARENTHESIS_OPEN STRING_CONSTANT COMMA IDENTIFIER PARENTHESIS_CLOSE
		| WRITELN PARENTHESIS_OPEN STRING_CONSTANT COMMA IDENTIFIER PARENTHESIS_CLOSE
		| WRITE PARENTHESIS_OPEN STRING_CONSTANT PARENTHESIS_CLOSE
		| WRITELN PARENTHESIS_OPEN STRING_CONSTANT PARENTHESIS_CLOSE
		| WRITE PARENTHESIS_OPEN STRING_CONSTANT COMMA EXPRESSION PARENTHESIS_CLOSE
		| WRITELN PARENTHESIS_OPEN STRING_CONSTANT COMMA EXPRESSION PARENTHESIS_CLOSE
	;

STRING_CONSTANT : QUOTATIONS STRING QUOTATIONS
	;

STRING : STRING ALPHANUMERICAL_CHAR | EMPTY
	;

IF_INSTRUCTION : IF RELOP_EXPRESSION THEN INSTRUCTIONS 
		| IF RELOP_EXPRESSION THEN INSTRUCTIONS ELSE INSTRUCTIONS
	;

VARIABLE_ASIGNATION : VARIABLE DOT_DOT EQUALS EXPRESSION
	;

FOR_ASIGNATION : ASIGNATION_VARIABLE | VARIABLE
	;

VARIABLE : IDENTIFIER | IDENTIFIER BRACKET_OPEN EXPRESSION BRACKET_CLOSE
	;

PROCEDURE_INSTRUCTION : IDENTIFIER | IDENTIFIER PARENTHESIS_OPEN LIST_EXPRESSION PARENTHESIS_OPEN
	;

RELOP_EXPRESSION : RELOP_EXPRESSION OR RELOP_AND | RELOP_AND
	;

RELOP_AND : RELOP_AND AND RELOP_NOT | RELOP_NOT
	;

RELOP_NOT : NOT RELOP_NOT | RELOP_PAREN
	;

RELOP_PAREN : PARENTHESIS_OPEN RELOP_EXPRESSION PARENTHESIS_OPEN | RELOP_SIMPLE_EXPRESSION
	;

RELOP_SIMPLE_EXPRESSION : EXPRESSION RELOP EXPRESSION
	;

EXPRESSION_LIST : EXPRESSION | LIST_EXPRESSION COMMA EXPRESSION
	;

EXPRESSION : TERM | EXPRESSION ADDOP TERM
	;

TERM : FACTOR | TERM MULOP FACTOR
	;

CALL_FUNCTION : IDENTIFIER PARENTHESIS_OPEN LIST_EXPRESSION PARENTHESIS_OPEN
	;

FACTOR : IDENTIFIER | IDENTIFIER BRACKET_OPEN EXPRESSION BRACKET_CLOSE | CALL_FUNCTION 
		| INT_CONSTANT | REAL_CONSTANT 
		| SIGN FACTOR | PARENTHESIS_OPEN EXPRESSION PARENTHESIS_OPEN
	;

INT_CONSTANT : SIGN INT_NUMBER
	;

INT_NUMBER : NON_CERO_DIGIT NUMBER
	;

NUMBER : NUMBER DIGIT | EMPTY
	;

REAL_CONSTANT : SIGN INT_NUMBER DOT INT_NUMBER | SIGN INT_NUMBER DOT INT_NUMBER EXPONENT
	;

EXPONENT : E_MINUS SIGN INT_NUMBER | E_MAX SIGN INT_NUMBER | EMPTY
	;

%%


int yyerror(char *s) 
{
   printf("Error %s\n", s);
   exit(1);
   return 0;
}

int main(int argc, char * argv[])
{
/* ++argv, --argc;
	if ( argc > 0 )
	{
		yyin = fopen( argv[0], "r" );
		if(!yyin)
			yyin = stdin;		
	}
	else
		yyin = stdin; */
   yyparse();
   printf("SUCCESS\n");
   return 0;
}
